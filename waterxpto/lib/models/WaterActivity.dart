import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';

class WaterActivity {
  late String id; // ID generated by Firestore

  late String name;
  late String description;
  late double waterFlow;

  WaterActivity({
    required this.name,
    required this.description,
    required this.waterFlow,
  });

  // Convert WaterActivity object to a Map
  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'description': description,
      'water_flow': waterFlow,
    };
  }

  factory WaterActivity.fromSnapshot(DocumentSnapshot snapshot) {
    return WaterActivity(
      name: snapshot['name'],
      description: snapshot['description'],
      waterFlow: snapshot['water_flow'].toDouble(),
    )..id = snapshot.id;
  }
}


class WaterActivityService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<String>> getAllWaterActivityNames() async {

    QuerySnapshot snapshot = await _firestore.collection('water_activities').get();

      List<String>? result = [];
      for (var doc in snapshot.docs) {result.add(doc['name']);}
      return result;


  }

  Future<WaterActivity?> getWaterActivity(String name) async {

    QuerySnapshot snapshot = await _firestore.collection('water_activities').where('name', isEqualTo: name).get();

    if(snapshot.docs.isNotEmpty) {
      DocumentSnapshot documentSnapshot = snapshot.docs.first;
      return WaterActivity.fromSnapshot(documentSnapshot);
    }
    else {
      return null;
    }

  }

  Future<WaterActivity?> getWaterActivityByID(String id) async {

    DocumentSnapshot snapshot = await _firestore.collection('water_activities').doc(id).get();
    return WaterActivity.fromSnapshot(snapshot);

  }

  Future<bool> addWaterActivity(WaterActivity waterActivity) async {
    try {
      await _firestore.collection('water_activities').add(waterActivity.toMap());
      return true;
    } catch (e) {
      print("Error adding water consumption: $e");
      return false;
    }
  }

}