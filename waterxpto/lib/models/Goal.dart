import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:get/get.dart';

class Goal {
  late String id; // ID generated by Firestore

  late String name;
  late double value;
  late double goalValue;
  late String creationDate;
  late String deadline;
  late String type;
  late String? userID;

  Goal({
    required this.name,
    required this.value,
    required this.goalValue,
    required this.creationDate,
    required this.deadline,
    required this.type,
    required this.userID,
  });

  Map<String, dynamic> toMap() {
    return {
      'name': name,
      'value': value,
      'goalValue': goalValue,
      'creationDate': creationDate,
      'deadline': deadline,
      'type': type,
      'user_id': userID,
    };
  }

  factory Goal.fromSnapshot(DocumentSnapshot snapshot) {
    return Goal(
      name: snapshot['name'],
      value: snapshot['value'].toDouble(),
      goalValue: snapshot['goalValue'].toDouble(),
      creationDate: snapshot['creationDate'],
      deadline: snapshot['deadline'],
      type: snapshot['type'],
      userID: snapshot['user_id'],
    )..id = snapshot.id;
  }
}

class GoalService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<List<Goal>> getAllGoals() async {
    QuerySnapshot snapshot = await FirebaseFirestore.instance.collection('goals').get();

    return snapshot.docs.map((doc) => Goal.fromSnapshot(doc)).toList();
  }

  Future<List<String>> getAllGoalNames() async {
    QuerySnapshot snapshot = await _firestore.collection('goals').get();

    List<String>? result = [];
    for (var doc in snapshot.docs) {result.add(doc['name']);}
    return result;
  }

  Future<Goal?> getGoal(String name) async {
    QuerySnapshot snapshot = await _firestore.collection('goals').where('name', isEqualTo: name).get();

    if(snapshot.docs.isNotEmpty) {
      DocumentSnapshot documentSnapshot = snapshot.docs.first;
      return Goal.fromSnapshot(documentSnapshot);
    }
    else {
      return null;
    }
  }

  Future<Goal?> getGoalByID(String id) async {
    DocumentSnapshot snapshot = await _firestore.collection('goals').doc(id).get();
    return Goal.fromSnapshot(snapshot);
  }

  Future<bool> addGoal(Goal goal) async {
    try {
      await _firestore.collection('goals').add(goal.toMap());
      return true;
    } catch (e) {
      print("Error adding goal: $e");
      return false;
    }
  }

  Future<bool> deleteGoal(String name) async {
    try {
      await _firestore.collection('goals').doc(name).delete();
      return true;
    } catch (e) {
      print("Error deleting goal: $e");
      return false;
    }
  }

  Future<List<Map<String, dynamic>>> getGoalsByUserID(String? userID) async {
    QuerySnapshot snapshot = await _firestore.collection('goals').where('user_id', isEqualTo: userID).get();
    return snapshot.docs.map((doc) => Goal.fromSnapshot(doc).toMap()).toList();
  }

  Future<bool> verifyGoal(Map<String, dynamic> goal) {
    if (goal['value'] >= goal['goalValue']) {
      return Future.value(true);
    } else {
      return Future.value(false);
    }
  }

  Future<bool> updateGoal(Goal goal) async {
    try {
      await _firestore.collection('goals').doc(goal.id).update(goal.toMap());
      return true;
    } catch (e) {
      print("Error updating goal: $e");
      return false;
    }
  }
}